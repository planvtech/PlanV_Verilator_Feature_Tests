#!/bin/bash
SCRIPT_DIR=$(realpath "$(dirname "$0")")
DEFAULT_TEST_DIR="${SCRIPT_DIR}/../planv_tests/feature_tests"
# Function to create feature tests framework
create_test_framework() {
    local test_path=$1
    local test_name=$2

    local base_dir="${test_path}/${test_name}"
    local verilator_sim_dir="${base_dir}/verilator_sim"
    mkdir -p "${verilator_sim_dir}"

    local sv_file_path="${test_path}/${test_name}.sv"
    if [[ -f "${sv_file_path}" ]]; then
        mv "${sv_file_path}" "${base_dir}"
    fi

    local makefile_path="${verilator_sim_dir}/Makefile"
    cat <<EOL > "${makefile_path}"
# -------------------------------------
# Testbench setup
# -------------------------------------
VERILATOR := verilator
ifdef VERILATOR_ROOT
VERILATOR := \$(VERILATOR_ROOT)/bin/verilator
endif

CMD = \$(pwd)
SV_PATHS := .
SV_FILES := \$(foreach path,\$(SV_PATHS),\$(wildcard \$(path)/*sv))

# -------------------------------------
# Compilation/simulation configuration
# -------------------------------------

VERILOG_DEFINE_FILES = ../${test_name}.sv
SIM_NAME = ${test_name}

SIM_DIR := \$(SIM_NAME)-sim
COMPILE_ARGS += -DUVM_NO_DPI
COMPILE_ARGS += --prefix \$(SIM_NAME) -o \$(SIM_NAME)
EXTRA_ARGS += --timescale 1ns/1ps --error-limit 100
WARNING_ARGS += -Wno-lint \\
	-Wno-style \\
	-Wno-SYMRSVDWORD \\
	-Wno-IGNOREDRETURN \\
	-Wno-ZERODLY \\
	-Wno-CONSTRAINTIGN

# -------------------------------------
# Some Useful args for debugging
# -------------------------------------
ifeq (\$(json_dump),1)
	EXTRA_ARGS += -dump-tree-json
else
endif

ifeq (\$(debug),1)
	EXTRA_ARGS += --debug --gdbbt -CFLAGS -DVL_DEBUG=1
else
endif


.PHONY: simulate clean verilate verilator-version

all: clean verilate simulate

verilate:
\$(SIM_DIR)/\$(SIM_NAME).mk: \$(SV_FILES)
	\$(VERILATOR) --cc --exe --main --trace --trace-structs --timing -Mdir \$(SIM_DIR) \\
	\${COMPILE_ARGS} \${EXTRA_ARGS} \\
	\${VERILOG_DEFINE_FILES} \\
	\${WARNING_ARGS}

\$(SIM_DIR)/\$(SIM_NAME): \$(SIM_DIR)/\$(SIM_NAME).mk
	\$(MAKE) -j\${NPROC} -C \$(SIM_DIR) \$(BUILD_ARGS) -f \$(SIM_NAME).mk

simulate: \$(SIM_DIR)/\$(SIM_NAME).mk \$(SIM_DIR)/\$(SIM_NAME)
	\$(SIM_DIR)/\$(SIM_NAME)

clean:
	rm -rf simv*.daidir csrc
	rm -rf csrc* simv*
	rm -rf \$(SIM_DIR)
	rm -rf dump.vcd

verilator-version:
	@echo "Running \$(VERILATOR) --version"
	@\$(VERILATOR) --version
EOL

    echo "Test framework for ${test_name} created successfully."
}


main() {
    TESTS_DIR="{$1:-DEFAULT_TEST_DIR}"
    if [ ! -d "$BASE_DIR" ]; then
        echo "Error: Specified base directory does not exist: $BASE_DIR" >&2
        exit 1
    fi
    find "${TESTS_DIR}" -type f -name "*.sv" | while read -r sv_file; do
        test_path=$(dirname "$sv_file")
        test_name=$(basename "$sv_file" .sv)
        create_test_framework "$test_path" "$test_name"
    done
}

main "$1"

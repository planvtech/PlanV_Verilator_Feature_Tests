#!/bin/env bash

# DESCRIPTION: PlanV CI System Scripts functions
#
# Property of PlanV GmbH, 2024. All rights reserved.
# Contact: yilou.wang@planv.tech

# Determine the directory where the script is located
SCRIPT_DIR=$(realpath $(dirname "$0"))
MAIN_DIR=$SCRIPT_DIR/..

LOGDIR="$MAIN_DIR/logs"

# Function to execute a command and log its output
execute_and_log() {
    LOGFILE="$1"
    shift
    COMMAND="$1"
    shift
    ARGS="$@"
    echo "Executing: $COMMAND $ARGS"
    echo "--------------------------------------------------" >> "$LOGFILE"
    echo "COMMAND: $COMMAND $ARGS" >> "$LOGFILE"
    echo "OUTPUT:" >> "$LOGFILE"
    eval "$COMMAND $ARGS" >> "$LOGFILE" 2>&1
    echo "--------------------------------------------------" >> "$LOGFILE"
}

create_logdir() {
    rm -rf "$LOGDIR"
    if [ ! -d "$LOGDIR" ]; then
        echo "Creating logs directory at $LOGDIR"
        mkdir -p "$LOGDIR"
    fi
}

# Functions corresponding to each step of the workflow
setup() {
    local TEST_DIR="$1"
    LOGFILE="$LOGDIR/run.log"
    echo "Fetching and Updating the submodules..."
    execute_and_log "$LOGFILE" "git submodule update --init --recursive"

    echo "Setting up tests simulation framework..."
    execute_and_log "$LOGFILE" "chmod +x $SCRIPT_DIR/setup_framework"
    execute_and_log "$LOGFILE" "$SCRIPT_DIR/setup_framework $TEST_DIR"
}

build() {
    local BRANCH="${1:-master}"
    if [ -d "$MAIN_DIR/verilator/$BRANCH" ]; then
        LOGFILE="$LOGDIR/run.log"
        echo "Building verilator/$BRANCH..."
        execute_and_log "$LOGFILE" "cd $MAIN_DIR/verilator/$BRANCH"
        execute_and_log "$LOGFILE" "pwd"
        execute_and_log "$LOGFILE" "git show -q"
        execute_and_log "$LOGFILE" "export VERILATOR_ROOT=$MAIN_DIR/verilator/$BRANCH"
        execute_and_log "$LOGFILE" "autoconf"
        execute_and_log "$LOGFILE" "./configure"
        execute_and_log "$LOGFILE" "make -j$(nproc)"
        echo "verilator/$BRANCH build is done."
    else
        echo "Error: Build directory for '$BRANCH' does not exist." >&2
        exit 1
    fi
}

run_tests() {
    local BRANCH="${1:-master}"
    local TEST_DIR="${2:-$MAIN_DIR/planv_tests/feature_tests}"
    if [ -d "$MAIN_DIR/verilator/$BRANCH" ]; then
        # Feature Tests
        REPORT_FILE="$LOGDIR/feature_tests/tests_report.log"
        mkdir -p "$(dirname "$REPORT_FILE")"
        echo "Feature Tests Report for $TEST_DIR on branch $BRANCH" > "$REPORT_FILE"
        echo "============" >> "$REPORT_FILE"

        for test_name in $(find "${TESTS_DIR}" -type f -name "t*.sv"); do
            test_dir=$(dirname "$test_name")
            relative_path=${test_name#*$MAIN_DIR/planv_tests/}
            echo "Found test file: $relative_path"
            # relative_test_dir=$(echo "$test_dir" | sed "s|$MAIN_DIR/planv_tests/feature_tests/||")
            relative_test_dir=${test_dir#*planv_tests/feature_tests/}
            relative_test_dir=$(dirname "$relative_test_dir")
            echo $relative_test_dir
            LOGFILE="$LOGDIR/feature_tests/$relative_test_dir/$(basename "$test_dir").log"
            mkdir -p "$(dirname "$LOGFILE")"

            echo "Running test in $test_dir/verilator_sim"
            execute_and_log "$LOGFILE" "cd $test_dir/verilator_sim"
            execute_and_log "$LOGFILE" "export VERILATOR_ROOT=$MAIN_DIR/verilator/$BRANCH"
            # execute_and_log "$LOGFILE" "z3 -h"
            execute_and_log "$LOGFILE" "make"
            execute_and_log "$LOGFILE" "cd -"
            if grep -q -E "test fail|Error" "$LOGFILE"; then
                echo "$relative_test_dir/$(basename "$test_dir"): FAILED" >> "$REPORT_FILE"
            else
                echo "$relative_test_dir/$(basename "$test_dir"): PASSED" >> "$REPORT_FILE"
            fi
        done
        echo "Feature Tests for verilator/$BRANCH completed in $TEST_DIR."
        # UVM Tests
        TEST_DIR="$MAIN_DIR/planv_tests/uvm_tests"
        REPORT_FILE="$LOGDIR/uvm_tests/tests_report.log"
        mkdir -p "$(dirname "$REPORT_FILE")"
        echo "UVM Test Report" > "$REPORT_FILE"
        echo "============" >> "$REPORT_FILE"
        for makefile in $(find $TEST_DIR -type f -name Makefile); do
            sim_dir=$(dirname "$makefile")
            case "$sim_dir" in
                *vsim_sim*)
                    echo "Skipping sim directory: $sim_dir"
                    execute_and_log "$LOGFILE" "export VERILATOR_ROOT=$MAIN_DIR/verilator/$BRANCH"
                    continue
                    ;;
                *verilator_sim*)
                    echo "Processing sim directory: $sim_dir"
                    test_dir=$(dirname "$sim_dir")
                    execute_and_log "$LOGFILE" "export VERILATOR_ROOT=$MAIN_DIR/verilator/$BRANCH"
                    continue # ubuntu-latest cannot support this efforting test, you can run it in your local with our server.
                    ;;
                *DUT*)
                    echo "Processing sim directory: $sim_dir"
                    test_dir="simple_c++_tb_veriator_test"
                    execute_and_log "$LOGFILE" "export VERILATOR_ROOT=$MAIN_DIR/verilator/$BRANCH"
                    ;;
                *pyuvm_test*)
                    echo "Processing sim directory: $sim_dir"
                    test_dir="pyuvm_test"
                    execute_and_log "$LOGFILE" "pip install pyuvm"
                    execute_and_log "$LOGFILE" "cocotb-config --version"
                    execute_and_log "$LOGFILE" "unset VERILATOR_ROOT"
                    execute_and_log "$LOGFILE" "export VERILATOR_BIN_DIR=$MAIN_DIR/verilator/$BRANCH/bin"
                    ;;
                *)
                    echo "Unknown sim directory: $sim_dir"
                    continue
                    ;;
            esac
            LOGFILE="$LOGDIR/uvm_tests/$(basename "$test_dir").log"
            mkdir -p "$(dirname "$LOGFILE")"

            echo "Running $test_dir in $sim_dir"
            execute_and_log "$LOGFILE" "cd $sim_dir"
            execute_and_log "$LOGFILE" "make"
            execute_and_log "$LOGFILE" "cd -"
            if grep -q -E "test fail|Error" "$LOGFILE"; then
                echo "$(basename "$test_dir"): FAILED" >> "$REPORT_FILE"
            else
                echo "$(basename "$test_dir"): PASSED" >> "$REPORT_FILE"
            fi
        done
        echo "UVM Tests for verilator/$BRANCH completed." >> "$REPORT_FILE"
        echo "Note for UVM Tests: 
            uvm_test_1: Currently only master branch can run successfuly while other branches cannot.
            uvm_test_2: Currently, due to recursive instantiation unsupported, test compilation is not complete.
            All these two tests work fine with vsim, you can check it in your local with vsim_sim folder.
                " >> "$REPORT_FILE"

        # Generate HTML Report
        echo "Generating HTML report..."
        execute_and_log "$LOGDIR/run.log" "cd $SCRIPT_DIR"
        execute_and_log "$LOGDIR/run.log" "pip install jinja2"
        execute_and_log "$LOGDIR/run.log" "chmod +x polish_to_html.py"
        execute_and_log "$LOGDIR/run.log" "python3 polish_to_html.py $BRANCH"
        execute_and_log "$LOGDIR/run.log" "cp $SCRIPT_DIR/planv_logo.png $LOGDIR/feature_tests/."
        echo "HTML report generated."
    else
        echo "Error: Test directory for '$BRANCH' does not exist." >&2
        exit 1
    fi
}

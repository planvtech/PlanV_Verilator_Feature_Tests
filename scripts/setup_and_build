#!/bin/env bash

# Determine the directory where the script is located
SCRIPT_DIR=$(realpath $(dirname "$0"))
MAIN_DIR=$SCRIPT_DIR/..

LOGDIR="$MAIN_DIR/logs"

# Function to execute a command and log its output
execute_and_log() {
    LOGFILE="$1"
    shift
    COMMAND="$1"
    shift
    ARGS="$@"
    echo "Executing: $COMMAND $ARGS"
    echo "--------------------------------------------------" >> "$LOGFILE"
    echo "COMMAND: $COMMAND $ARGS" >> "$LOGFILE"
    echo "OUTPUT:" >> "$LOGFILE"
    eval "$COMMAND $ARGS" >> "$LOGFILE" 2>&1
    echo "--------------------------------------------------" >> "$LOGFILE"
}

create_logdir() {
    if [ ! -d "$LOGDIR" ]; then
        echo "Creating logs directory at $LOGDIR"
        mkdir -p "$LOGDIR"
    fi
}

# Functions corresponding to each step of the workflow
setup() {
    LOGFILE="$LOGDIR/setup_and_build.log"
    echo "Fetching and Updating the submodules..."
    execute_and_log "$LOGFILE" "git submodule update --init --recursive"

    echo "Setting up tests simulation framework..."
    execute_and_log "$LOGFILE" "chmod +x $SCRIPT_DIR/setup_feature_tests_sim_framework"
    execute_and_log "$LOGFILE" "$SCRIPT_DIR/setup_feature_tests_sim_framework $MAIN_DIR"
}

build() {
    if [ -z "$1" ]; then
        echo "Error: No branch specified." >&2
        exit 1
    fi
    BRANCH="$1"
    if [ -d "$MAIN_DIR/verilator/$BRANCH" ]; then
        LOGFILE="$LOGDIR/setup_and_build.log"
        echo "Building verilator/$BRANCH..."
        execute_and_log "$LOGFILE" "cd $MAIN_DIR/verilator/$BRANCH"
        execute_and_log "$LOGFILE" "pwd"
        execute_and_log "$LOGFILE" "git show -q"
        execute_and_log "$LOGFILE" "export VERILATOR_ROOT=$MAIN_DIR/verilator/$BRANCH"
        execute_and_log "$LOGFILE" "autoconf"
        execute_and_log "$LOGFILE" "./configure"
        execute_and_log "$LOGFILE" "make -j$(nproc)"
        echo "verilator/$BRANCH build is done."
    else
        echo "Error: Build directory for '$BRANCH' does not exist." >&2
        exit 1
    fi
}

run_tests() {
    if [ -z "$1" ]; then
        echo "Error: No branch specified." >&2
        exit 1
    fi
    BRANCH="$1"
    if [ -d "$MAIN_DIR/verilator/$BRANCH" ]; then
        
        # Feature Tests
        TEST_DIR="$MAIN_DIR/planv_tests/feature_tests"
        REPORT_FILE="$LOGDIR/feature_tests/tests_report.log"
        mkdir -p "$(dirname "$REPORT_FILE")"
        echo "Feature Tests Report" > "$REPORT_FILE"
        echo "============" >> "$REPORT_FILE"

        for verilator_sim_dir in $(find $TEST_DIR -type d -name verilator_sim); do
            test_dir=$(dirname "$verilator_sim_dir")
            # relative_test_dir=$(echo "$test_dir" | sed "s|$MAIN_DIR/planv_tests/feature_tests/||")
            relative_test_dir=${test_dir#*$MAIN_DIR/planv_tests/feature_tests/}
            relative_test_dir=$(dirname "$relative_test_dir")
            LOGFILE="$LOGDIR/feature_tests/$relative_test_dir/$(basename "$test_dir").log"
            mkdir -p "$(dirname "$LOGFILE")"

            echo "Running test in $test_dir/verilator_sim"
            execute_and_log "$LOGFILE" "cd $test_dir/verilator_sim"
            execute_and_log "$LOGFILE" "export VERILATOR_ROOT=$MAIN_DIR/verilator/$BRANCH"
            # execute_and_log "$LOGFILE" "z3 -h"
            execute_and_log "$LOGFILE" "make"
            execute_and_log "$LOGFILE" "cd -"
            if grep -q -E "test fail|Error" "$LOGFILE"; then
                echo "$relative_test_dir/$(basename "$test_dir"): FAILED" >> "$REPORT_FILE"
            else
                echo "$relative_test_dir/$(basename "$test_dir"): PASSED" >> "$REPORT_FILE"
            fi
        done
        echo "Feature Tests for verilator/$BRANCH completed."

        # UVM Tests
        TEST_DIR="$MAIN_DIR/planv_tests/uvm_tests"
        REPORT_FILE="$LOGDIR/uvm_tests/tests_report.log"
        mkdir -p "$(dirname "$REPORT_FILE")"
        echo "UVM Test Report" > "$REPORT_FILE"
        echo "============" >> "$REPORT_FILE"

        for makefile in $(find $TEST_DIR -type f -name Makefile); do
            sim_dir=$(dirname "$makefile")
            case "$sim_dir" in
                *vsim_sim*)
                    echo "Skipping sim directory: $sim_dir"
                    execute_and_log "$LOGFILE" "export VERILATOR_ROOT=$MAIN_DIR/verilator/$BRANCH"
                    continue
                    ;;
                *verilator_sim*)
                    echo "Processing sim directory: $sim_dir"
                    test_dir=$(dirname "$sim_dir")
                    execute_and_log "$LOGFILE" "export VERILATOR_ROOT=$MAIN_DIR/verilator/$BRANCH"
                    continue
                    ;;
                *DUT*)
                    echo "Processing sim directory: $sim_dir"
                    test_dir="simple_c++_tb_veriator_test"
                    execute_and_log "$LOGFILE" "export VERILATOR_ROOT=$MAIN_DIR/verilator/$BRANCH"
                    ;;
                *pyuvm_test*)
                    echo "Processing sim directory: $sim_dir"
                    test_dir="pyuvm_test"
                    execute_and_log "$LOGFILE" "pip install pyuvm"
                    execute_and_log "$LOGFILE" "cocotb-config --version"
                    execute_and_log "$LOGFILE" "unset VERILATOR_ROOT"
                    execute_and_log "$LOGFILE" "export VERILATOR_BIN_DIR=$MAIN_DIR/verilator/$BRANCH/bin"
                    ;;
                *)
                    echo "Unknown sim directory: $sim_dir"
                    continue
                    ;;
            esac
            
            LOGFILE="$LOGDIR/uvm_tests/$(basename "$test_dir").log"
            mkdir -p "$(dirname "$LOGFILE")"

            echo "Running $test_dir in $sim_dir"
            execute_and_log "$LOGFILE" "cd $sim_dir"
            
            execute_and_log "$LOGFILE" "make"
            execute_and_log "$LOGFILE" "cd -"
            if grep -q -E "test fail|Error" "$LOGFILE"; then
                echo "$(basename "$test_dir"): FAILED" >> "$REPORT_FILE"
            else
                echo "$(basename "$test_dir"): PASSED" >> "$REPORT_FILE"
            fi
        done
        echo "UVM Tests for verilator/$BRANCH completed." >> "$REPORT_FILE"

        # Generate HTML Report
        echo "Generating HTML report..."
        execute_and_log "$LOGDIR/setup_and_build.log" "cd $SCRIPT_DIR"
        execute_and_log "$LOGDIR/setup_and_build.log" "pip install jinja2"
        execute_and_log "$LOGDIR/setup_and_build.log" "chmod +x polish_to_html.py"
        execute_and_log "$LOGDIR/setup_and_build.log" "python3 polish_to_html.py $BRANCH"
        echo "HTML report generated."
        
    else
        echo "Error: Test directory for '$BRANCH' does not exist." >&2
        exit 1
    fi
}

# If no arguments are given, run all steps
if [[ $# -eq 0 ]]; then
    echo "No arguments are given, running the whole routine with master branch..."
    create_logdir
    setup
    build "master"
    run_tests "master"
    exit 0
fi

# Parse arguments and run individual steps
while [ -n "$1" ]; do
    case "$1" in
        --setup) setup;;
        --build) shift; build "$1";;
        --run-tests) shift; run_tests "$1";;
        --help) echo "Usage: $0 [--setup] [--build <branch>] [--run-tests <branch>] "; exit 0;;
        *) echo "Option $1 not recognized" >&2; exit 1;;
    esac
    shift
done
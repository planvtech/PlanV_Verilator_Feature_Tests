#!/bin/env bash

# Determine the directory where the script is located
SCRIPT_DIR=$(realpath $(dirname "$0"))
MAIN_DIR=$SCRIPT_DIR/..

LOGDIR="$MAIN_DIR/logs"

# Function to execute a command and log its output
execute_and_log() {
    LOGFILE="$1"
    shift
    COMMAND="$1"
    shift
    ARGS="$@"
    echo "Executing: $COMMAND $ARGS"
    echo "--------------------------------------------------" >> "$LOGFILE"
    echo "COMMAND: $COMMAND $ARGS" >> "$LOGFILE"
    echo "OUTPUT:" >> "$LOGFILE"
    eval "$COMMAND $ARGS" >> "$LOGFILE" 2>&1
    echo "--------------------------------------------------" >> "$LOGFILE"
}

# Functions corresponding to each step of the workflow
setup() {
    LOGFILE="$LOGDIR/setup_and_build.log"
    echo "Fetching and Updating the submodules..."
    execute_and_log "$LOGFILE" "git submodule update --init --recursive"
}

build() {
    if [ -z "$1" ]; then
        echo "Error: No branch specified." >&2
        exit 1
    fi
    BRANCH="$1"
    if [ -d "$MAIN_DIR/verilator/$BRANCH" ]; then
        LOGFILE="$LOGDIR/setup_and_build.log"
        echo "Building verilator/$BRANCH..."
        execute_and_log "$LOGFILE" "cd $MAIN_DIR/verilator/$BRANCH"
        execute_and_log "$LOGFILE" "pwd"
        execute_and_log "$LOGFILE" "git show -q"
        execute_and_log "$LOGFILE" "export VERILATOR_ROOT=$MAIN_DIR/verilator/$BRANCH"
        execute_and_log "$LOGFILE" "autoconf"
        execute_and_log "$LOGFILE" "./configure"
        execute_and_log "$LOGFILE" "make -j$(nproc)"
        echo "verilator/$BRANCH build is done."
    else
        echo "Error: Build directory for '$BRANCH' does not exist." >&2
        exit 1
    fi
}

run_tests() {
    if [ -z "$1" ]; then
        echo "Error: No branch specified." >&2
        exit 1
    fi
    BRANCH="$1"
    if [ -d "$MAIN_DIR/verilator/$BRANCH" ]; then
        TEST_DIR="$MAIN_DIR/planv_tests/feature_tests"
        REPORT_FILE="$TEST_DIR/tests_report.log"
        mkdir -p "$(dirname "$REPORT_FILE")"
        echo "Test Report" > "$REPORT_FILE"
        echo "============" >> "$REPORT_FILE"

        for verilator_sim_dir in $(find $TEST_DIR -type d -name verilator_sim); do
            test_dir=$(dirname "$verilator_sim_dir")
            category_dir=$(dirname "$test_dir")
            LOGFILE="$TEST_DIR/$(basename "$category_dir")/$(basename "$test_dir").log"
            mkdir -p "$(dirname "$LOGFILE")"

            echo "Running test in $test_dir/verilator_sim"
            execute_and_log "$LOGFILE" "cd $test_dir/verilator_sim"
            execute_and_log "$LOGFILE" "export VERILATOR_ROOT=$MAIN_DIR/verilator/$BRANCH"
            execute_and_log "$LOGFILE" "make"
            execute_and_log "$LOGFILE" "cd -"
            if grep -q -E "test fail|fail|Error" "$LOGFILE"; then
                echo "$(basename "$test_dir"): FAILED" >> "$REPORT_FILE"
            else
                echo "$(basename "$test_dir"): PASSED" >> "$REPORT_FILE"
            fi
        done
        echo "Feature Tests for verilator/$BRANCH completed."
    else
        echo "Error: Test directory for '$BRANCH' does not exist." >&2
        exit 1
    fi
}

report_tests() {
    echo "Generating test report..."
    SUMMARY_FILE="$LOGDIR/test_summary.txt"
    echo "Test Summary" > "$SUMMARY_FILE"
    echo "============" >> "$SUMMARY_FILE"
    for log_file in $LOGDIR/$BRANCH/simple_feature_tests/*.log; do
        if grep -q -E "test fail|fail|Error" "$log_file"; then
            echo "$(basename "$log_file"): FAILED" >> "$SUMMARY_FILE"
        else
            echo "$(basename "$log_file"): PASSED" >> "$SUMMARY_FILE"
        fi
    done
    echo "Test summary written to $SUMMARY_FILE"
}

# If no arguments are given, run all steps
if [[ $# -eq 0 ]]; then
    echo "No arguments are given, running the whole routine with master branch..."
    setup
    build "master"
    run_tests "master"
fi

# Parse arguments and run individual steps
while [ -n "$1" ]; do
    case "$1" in
        --setup) setup;;
        --build) shift; build "$1";;
        --run-tests) shift; run_tests "$1";;
        --help) echo "Usage: $0 [--setup] [--build <branch>] [--run-tests <branch>] "; exit 0;;
        *) echo "Option $1 not recognized" >&2; exit 1;;
    esac
    shift
done